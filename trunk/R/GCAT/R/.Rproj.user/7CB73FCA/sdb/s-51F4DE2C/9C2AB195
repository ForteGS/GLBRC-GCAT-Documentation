{
    "contents" : "#Copyright 2012 The Board of Regents of the University of Wisconsin System.\n#Contributors: Jason Shao, James McCurdy, Enhai Xie, Adam G.W. Halstead, \n#Michael H. Whitney, Nathan DiPiazza, Trey K. Sato and Yury V. Bukhman\n#\n#This file is part of GCAT.\n#\n#GCAT is free software: you can redistribute it and/or modify\n#it under the terms of the GNU Lesser General Public License as published by\n#the Free Software Foundation, either version 3 of the License, or\n#(at your option) any later version.\n#\n#GCAT is distributed in the hope that it will be useful,\n#but WITHOUT ANY WARRANTY; without even the implied warranty of\n#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#GNU Lesser General Public License for more details.\n#\n#You should have received a copy of the GNU Lesser General Public License  \n#along with GCAT.  If not, see <http://www.gnu.org/licenses/>.\n\n########################################################################\n#                                                                      #\n#  Fit a parameterized model to the growth data in a well object.      #\n#                                                                      #\n########################################################################\n#\n# growth.model and backup.growth.model: objects of class \"model\" (see class.model.R) to use in non-linear regression\n#\n# This function will use the function stored in the \"guess\" slot of <growth.model> to calculate initial guesses for growth.model parameters\n#   then it will use the \"formula\" slot with <nls> to fit a non-linear least squares growth.model to the data. \n# If fitting with <growth.model> fails the function will attempt to use <backup.growth.model> (which should be a simpler growth.model with fewer parameters for best results)\n#\n# fit.if.no.growth: should the function attempt to fit a well even if there was no growth detected? default is F \n# silent: output back to R console? \n\nfit.model = function(input.well, growth.model, backup.growth.model = NULL, fit.if.no.growth = F, silent = T){\n\n\t# Change all relevant slots to <NA> or blank values\n\tinput.well@model.name = \"<NA>\"\n  input.well@fit.par = list()\n  input.well@equation = expression() \n  \n  # Get OD vs. time data from well\n \tinput.data = data.from(input.well, na.rm = T) \n  \n  # Skip well if <no.growth> in slot \"curve.par\" is set to true, and <fit.if.no.growth> is false. \n\tif(!fit.if.no.growth & lacks.growth(input.well)){\n\t\tinput.well@fit.info = \"skipped - no growth in well.\"\n\t\tif (!silent)\n\t\t\tcat(plate.name(input.well), well.name(input.well), \":\", input.well@fit.info, \"\\n\")\n\t\treturn(input.well)\n\t\t}\n\t# Skip well if there are fewer than 5 data points left in the analysis. \n\tif (length(input.data$Time) < 5){\n\t\tinput.well@fit.info = \"skipped - not enough points.\"\n\t\tif (!silent)\n\t\t\tcat(plate.name(input.well), well.name(input.well), \":\", input.well@fit.info, \"\\n\")\n\t\treturn(input.well)\n\t\t}\n\t\n\t# Change column headers of input.data to the more general \"Time\" vs. \"y\"\n  names(input.data) = c(\"Time\", \"y\")\n\n  # Extract the model formula from <growth.model> (slot \"formula\")\n  # Use the function from slot \"guess\" to calculate initial guesses for model parameters based on slope estimates in <input.well>\n  # Attempt to fit a nonlinear least squares odel using <nls> \n   \n\tfit = try(nls(formula = growth.model@formula, data = input.data, start = growth.model@guess(input.well)), silent = T)\n\t\n\t# If using a Richards 5 parameter model, report an error if the fitted value for c is negative,\t\t\t\n  #   if the baseline is below the plateau, or if the fitted theta is negative. \n\t\n\tif(growth.model@name == \"richards 5-par.\"){\n\t\tif(class(fit) == \"nls\"){\n\t\t\tfit.par = as.list(coef(fit))       \n\t\t\tif (fit.par$c < 0 | fit.par$th < 0 | fit.par$b < fit.par$a)\n\t\t\t\tclass(fit) = \"try-error\"\n\t\t\t}\n\t\t}\n\n  # If no error was reported by the model fitting, report successful fit in slot \"fit.info\", add coefficients to slot \"fit.par\", \n  #   add the model equation and name to slots \"equation\" and \"growth.model.name\"\n\tif (class(fit) == \"nls\"){\n\t\tinput.well@fit.info = paste(\"Model fit successfully.\")\n\t\tinput.well@fit.par = as.list(coef(fit))\n\t\tinput.well@equation = growth.model@expression\n\t\tinput.well@model.name = growth.model@name\n\t\t}\n\t# If the model fitting returned an error, do the same thing as above except using the backup model. \n\telse{\n\t\tfit = try(nls(formula = backup.growth.model@formula, data = input.data, start = backup.growth.model@guess(input.well)), silent = T)\n    if (class(fit) == \"nls\"){\n      # If using a logistic 4-parameter model, report an error if the fitted baseline is below the plateau, or if the fitted theta is \n      fit.par = as.list(coef(fit))  \n      if(backup.growth.model@name == \"logistic 4-par.\" & (fit.par$th < 0 | fit.par$b < fit.par$a))\n  \t\t\tinput.well@fit.info = \"Model fitting failed.\"\t\t\n \t\t\telse{\n\t\t    input.well@fit.info = paste(\"Model fit successfully.\")\n  \t\t\tinput.well@fit.par = as.list(coef(fit))\n  \t\t\tinput.well@equation = backup.growth.model@expression\n  \t\t\tinput.well@model.name = backup.growth.model@name\n        }\t\n  \t\t}\n \t\t# If both models failed, report a failure to slot \"fit.info.\" leave the other slots blank or NA. \n\t\telse\n\t\t\tinput.well@fit.info = \"Model fitting failed.\"\t\t\n\t\t}\n  # Output to console\n\tif (!silent)\n\t\tcat(plate.name(input.well), well.name(input.well), \":\", input.well@fit.info, growth.model@name, \"\\n\")\n\treturn(input.well)\n\t}\n",
    "created" : 1398102016792.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3543061597",
    "id" : "9C2AB195",
    "lastKnownWriteTime" : 1397767472,
    "path" : "~/Documents/GCAT/trunk/R/GCAT/R/fit.model.R",
    "project_path" : "fit.model.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}