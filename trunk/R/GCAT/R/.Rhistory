?? aaply
?? aapply
? aaply
good.fit = unlist(aapply(fitted.data.set, model.good.fit, unlog = F))
#Copyright 2012 The Board of Regents of the University of Wisconsin System.
#Contributors: Jason Shao, James McCurdy, Enhai Xie, Adam G.W. Halstead,
#Michael H. Whitney, Nathan DiPiazza, Trey K. Sato and Yury V. Bukhman
#
#This file is part of GCAT.
#
#GCAT is free software: you can redistribute it and/or modify
#it under the terms of the GNU Lesser General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#GCAT is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Lesser General Public License for more details.
#
#You should have received a copy of the GNU Lesser General Public License
#along with GCAT.  If not, see <http://www.gnu.org/licenses/>.
########################################################################
#                                                                      #
# Populate an output table with parameters and other useful info for   #
#   each well in a fitted dataset.                                     #
#                                                                      #
########################################################################
#
# unlog - Should OD values be returned on the linear scale instead of log-transformed scale?
# constant.added - For returning values on linear scale, what constant was added to ODs before the log transform?
# reach.cutoff - what proportion of the plateau OD must tbe reached by the last valid timepoint for the curve to be marked as reaching its plateau OD?
#
table.out = function(fitted.data.set, unlog = T, constant.added = 1.0, reach.cutoff = 0.90, filename.timestamp = NULL){
# The idea is basically to use <unlist> and <aapply> on the fitted data array in order
# to get one vector for each column of the output table.
# Get identifying information (plate, well, media and strain names)
plate.ID = unlist(aapply(fitted.data.set,plate.name))
well.ID = unlist(aapply(fitted.data.set,well.name))
media.ID = unlist(aapply(fitted.data.set,media.name))
strain.ID = unlist(aapply(fitted.data.set,strain.name))
# Get fit information for each well
#   - was it marked as empty in the plate layout?
#   - did the program find it to contain no growth ("dead")?
#   - was the fitting procedure successful?
#   - did the curve tank? if so, at what timepoint? if not, set value to "-"
empty = unlist(aapply(fitted.data.set, is.empty))
dead  = unlist(aapply(fitted.data.set, lacks.growth))
fit = unlist(aapply(fitted.data.set, contains.fit))
tanking = unlist(aapply(fitted.data.set, tanking.start))
tanking[is.na(tanking) | tanking == 1 | dead] = "-"
# Get calculated values for each well: specific growth, final and initial OD, fitted plateau and baseline OD, lag time.
spec.growth = unlist(aapply(fitted.data.set, specific.growth))
fin.growth = unlist(aapply(fitted.data.set, end.OD, unlog = unlog))
init.growth = unlist(aapply(fitted.data.set, inoc.OD, unlog = unlog))
}
class(T)
class(Inf)\
class(Inf)
?? var
? var
?? eval
?? exp
? exp()
exp(2)
exp(4)
e ** 2
2.7 *8 2
2.7 ** 2
5/3
